name: Full QA Deploy (Build Client, Push, Deploy All)

on:
  workflow_dispatch: {}  # Manual trigger

jobs:
  qa-deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set Tag for QA Image
        id: vars
        run: echo "tag=qa-${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Build and Push Client Image for QA
        working-directory: blog/client
        run: |
          export $(cat .env.qa | xargs)
          docker build \
            --build-arg REACT_APP_COMMENTS_SERVICE_URL=$REACT_APP_COMMENTS_SERVICE_URL \
            --build-arg REACT_APP_QUERY_SERVICE_URL=$REACT_APP_QUERY_SERVICE_URL \
            --build-arg REACT_APP_POSTS_SERVICE_URL=$REACT_APP_POSTS_SERVICE_URL \
            --build-arg REACT_APP_EVENTBUS_SERVICE_URL=$REACT_APP_EVENTBUS_SERVICE_URL \
            -t ${{ secrets.ECR_CLIENT_URI }}:${{ env.tag }} .
          docker push ${{ secrets.ECR_CLIENT_URI }}:${{ env.tag }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig \
            --name ${{ secrets.EKS_CLUSTER_NAME }} \
            --region ${{ secrets.AWS_REGION }}

      - name: Apply all Kubernetes manifests to QA namespace
        run: |
          kubectl apply -n qa -f k8s/qa/posts-deployment.yaml
          kubectl apply -n qa -f k8s/qa/posts-service.yaml
          kubectl apply -n qa -f k8s/qa/comments-deployment.yaml
          kubectl apply -n qa -f k8s/qa/comments-service.yaml
          kubectl apply -n qa -f k8s/qa/event-bus-deployment.yaml
          kubectl apply -n qa -f k8s/qa/event-bus-service.yaml
          kubectl apply -n qa -f k8s/qa/query-deployment.yaml
          kubectl apply -n qa -f k8s/qa/query-service.yaml
          kubectl apply -n qa -f k8s/qa/client-service.yaml
          kubectl apply -n qa -f k8s/qa/ingress.yaml

      - name: Patch client deployment image
        run: |
          kubectl set image deployment/client-deployment \
            client=${{ secrets.ECR_CLIENT_URI }}:${{ env.tag }} \
            -n qa

      - name: Wait for all Pods to become Ready
        run: |
          kubectl rollout status deployment/posts-deployment -n qa
          kubectl rollout status deployment/comments-deployment -n qa
          kubectl rollout status deployment/event-bus-deployment -n qa
          kubectl rollout status deployment/query-deployment -n qa
          kubectl rollout status deployment/client-deployment -n qa

      - name: Print QA Pod, Service, and Ingress Status
        run: |
          kubectl get pods -n qa
          kubectl get svc -n qa
          kubectl get ingress -n qa

      - name: Test Ingress URL
        run: |
          INGRESS_URL=$(kubectl get ingress app-ingress -n qa -o jsonpath="{.status.loadBalancer.ingress[0].hostname}")
          echo "üîó Testing Ingress at: http://$INGRESS_URL"

          for i in {1..10}; do
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://$INGRESS_URL)
            echo "Attempt $i ‚Üí HTTP $HTTP_STATUS"
            if [ "$HTTP_STATUS" = "200" ]; then
              echo "‚úÖ App is reachable!"
              exit 0
            fi
            sleep 10
          done

          echo "‚ùå Ingress failed after 10 attempts."
          exit 1
